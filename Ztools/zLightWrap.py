# -*- coding: utf-8 -*-
#DO NOT EDIT THIS FILE
#This file was automatically generated by Natron PyPlug exporter version 3.

#Hand-written code should be added in a separate file named zLightWrapExt.py
#See http://natron.readthedocs.org/en/workshop/groups.html#adding-hand-written-code-callbacks-etc
#Note that Viewers are never exported

import NatronEngine
import sys

#Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from zLightWrapExt import *
except ImportError:
    pass

def getPluginID():
    return "huargovfx.zLightWrap"

def getLabel():
    return "zLightWrap"

def getVersion():
    return 1

def getIconPath():
    return "zLightWrap.png"

def getGrouping():
    return "Ztools"

def getPluginDescription():
    return "LightWrap tool"

def createInstance(app,group):

    #Create all nodes in the group
    lastNode = app.createNode("fr.inria.built-in.Output".encode('string_escape'), 1, group)
    lastNode.setScriptName("Output1".encode('string_escape'))
    lastNode.setLabel("Output1".encode('string_escape'))
    lastNode.setPosition(1678.18, 631.734)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.699992, 0.699992, 0.699992)
    groupOutput1 = lastNode

    del lastNode



    lastNode = app.createNode("fr.inria.built-in.Input".encode('string_escape'), 1, group)
    lastNode.setScriptName("Input1".encode('string_escape'))
    lastNode.setLabel("Input1".encode('string_escape'))
    lastNode.setPosition(1052.85, -96.8901)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupInput1 = lastNode

    del lastNode



    lastNode = app.createNode("net.sf.openfx.ShufflePlugin".encode('string_escape'), 1, group)
    lastNode.setScriptName("Shuffle1".encode('string_escape'))
    lastNode.setLabel("Shuffle1".encode('string_escape'))
    lastNode.setPosition(1054.57, 110.5)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.239994, 0.390005)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("RGBA".encode('string_escape'))
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.a".encode('string_escape'))
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.a".encode('string_escape'))
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.a".encode('string_escape'))
        del param

    param = lastNode.getParam("createA")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.cimg.CImgBlur".encode('string_escape'), 3, group)
    lastNode.setScriptName("Blur1".encode('string_escape'))
    lastNode.setLabel("Diffuse".encode('string_escape'))
    lastNode.setPosition(1054.57, 193.786)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.500008, 0.300008)
    groupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(60, 0)
        param.setValue(60, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Nearest".encode('string_escape'):
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter boundary of node Group1.Blur1".encode('string_escape'))
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Gaussian".encode('string_escape'):
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter filter of node Group1.Blur1".encode('string_escape'))
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("RGBA.A".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.cimg.CImgBlur".encode('string_escape'), 3, group)
    lastNode.setScriptName("Blur2".encode('string_escape'))
    lastNode.setLabel("BG_Blur".encode('string_escape'))
    lastNode.setPosition(1051.74, 305.763)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.500008, 0.300008)
    groupBlur2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(40, 0)
        param.setValue(40, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Nearest".encode('string_escape'):
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter boundary of node Group1.Blur2".encode('string_escape'))
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Box".encode('string_escape'):
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter filter of node Group1.Blur2".encode('string_escape'))
        del param

    param = lastNode.getParam("expandRoD")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("RGBA.A".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.ConstantPlugin".encode('string_escape'), 1, group)
    lastNode.setScriptName("Constant1".encode('string_escape'))
    lastNode.setLabel("Resolution".encode('string_escape'))
    lastNode.setPosition(1233.21, 440.472)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("format")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        param.setEnabled(False, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2048, 0)
        param.setValue(1152, 1)
        param.setVisible(False)
        param.setEnabled(False, 0)
        param.setEnabled(False, 1)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.MergePlugin".encode('string_escape'), 1, group)
    lastNode.setScriptName("Merge1".encode('string_escape'))
    lastNode.setLabel("Merge1".encode('string_escape'))
    lastNode.setPosition(1233.21, 293.763)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.300008, 0.370001, 0.775998)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("screenAlpha")
    if param is not None:
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("RGBA.A".encode('string_escape'))
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\"><Natron>(over)</Natron></font>".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.MergePlugin".encode('string_escape'), 1, group)
    lastNode.setScriptName("Merge2".encode('string_escape'))
    lastNode.setLabel("Merge2".encode('string_escape'))
    lastNode.setPosition(1678.18, 293.763)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.300008, 0.370001, 0.775998)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus".encode('string_escape'))
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "plus".encode('string_escape'):
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter operation of node Group1.Merge2".encode('string_escape'))
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("maskChannel_Mask")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "None".encode('string_escape'):
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter maskChannel_Mask of node Group1.Merge2".encode('string_escape'))
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("None".encode('string_escape'))
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\"><Natron>(plus)</Natron></font>".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("fr.inria.built-in.Dot".encode('string_escape'), 1, group)
    lastNode.setScriptName("Dot2".encode('string_escape'))
    lastNode.setLabel("Dot2".encode('string_escape'))
    lastNode.setPosition(1723.18, 21.2755)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.699992, 0.699992, 0.699992)
    groupDot2 = lastNode

    del lastNode



    lastNode = app.createNode("net.sf.openfx.switchPlugin".encode('string_escape'), 1, group)
    lastNode.setScriptName("Switch1".encode('string_escape'))
    lastNode.setLabel("effect_only".encode('string_escape'))
    lastNode.setPosition(1678.18, 468.222)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.370001, 0.775998)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("fr.inria.built-in.Dot".encode('string_escape'), 1, group)
    lastNode.setScriptName("Dot3".encode('string_escape'))
    lastNode.setLabel("Dot3".encode('string_escape'))
    lastNode.setPosition(1097.85, 19.2161)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.699992, 0.699992, 0.699992)
    groupDot3 = lastNode

    del lastNode



    lastNode = app.createNode("fr.inria.built-in.Input".encode('string_escape'), 1, group)
    lastNode.setScriptName("Input2".encode('string_escape'))
    lastNode.setLabel("BG".encode('string_escape'))
    lastNode.setPosition(669.691, 307.945)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupInput2 = lastNode

    del lastNode



    lastNode = app.createNode("net.sf.openfx.switchPlugin".encode('string_escape'), 1, group)
    lastNode.setScriptName("Switch2".encode('string_escape'))
    lastNode.setLabel("Constant_Hightlight".encode('string_escape'))
    lastNode.setPosition(838.33, 307.945)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.370001, 0.775998)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.ConstantPlugin".encode('string_escape'), 1, group)
    lastNode.setScriptName("Constant1_1".encode('string_escape'))
    lastNode.setLabel("Constant".encode('string_escape'))
    lastNode.setPosition(838.33, 425.855)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupConstant1_1 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Size".encode('string_escape'):
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter extent of node Group1.Constant1_1".encode('string_escape'))
        del param

    param = lastNode.getParam("format")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2048, 0)
        param.setValue(1152, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(0.630757, 1)
        param.setValue(0.630757, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin".encode('string_escape'), 2, group)
    lastNode.setScriptName("Multiply1_1".encode('string_escape'))
    lastNode.setLabel("Multiply1_1".encode('string_escape'))
    lastNode.setPosition(1385.66, 305.763)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.480003, 0.659998, 1)
    groupMultiply1_1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0.25, 0)
        param.setValue(0.25, 1)
        param.setValue(0.25, 2)
        param.setValue(0.25, 3)
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("RGBA.A".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.SaturationPlugin".encode('string_escape'), 2, group)
    lastNode.setScriptName("Saturation1_1_1".encode('string_escape'))
    lastNode.setLabel("Saturation1_1_1".encode('string_escape'))
    lastNode.setPosition(1517.2, 305.763)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.480003, 0.659998, 1)
    groupSaturation1_1_1 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("RGBA.A".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("fr.inria.openfx.SeExpr".encode('string_escape'), 2, group)
    lastNode.setScriptName("SeExpr1".encode('string_escape'))
    lastNode.setLabel("SeExpr1".encode('string_escape'))
    lastNode.setPosition(1233.21, 110.5)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupSeExpr1 = lastNode

    param = lastNode.getParam("format")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        param.setEnabled(False, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2048, 0)
        param.setValue(1152, 1)
        param.setVisible(False)
        param.setEnabled(False, 0)
        param.setEnabled(False, 1)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color".encode('string_escape'))
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color".encode('string_escape'))
        del param

    param = lastNode.getParam("x1")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x2")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x3")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x4")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x5")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x6")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x7")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x8")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x9")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x10")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos1")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos2")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos3")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos4")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos5")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos6")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos7")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos8")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos9")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos10")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color1")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color2")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color3")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color4")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color5")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color6")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color7")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color8")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color9")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color10")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("script")
    if param is not None:
        param.setValue("#Just copy the source RGB\nCs1-Cs2\n".encode('string_escape'))
        del param

    param = lastNode.getParam("alphaScript")
    if param is not None:
        param.setValue("#Just copy the source alpha\nAs1-As2\n".encode('string_escape'))
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("RGBA.A".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.Clamp".encode('string_escape'), 2, group)
    lastNode.setScriptName("Clamp1".encode('string_escape'))
    lastNode.setLabel("Clamp1".encode('string_escape'))
    lastNode.setPosition(1679.67, 552.367)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.480003, 0.659998, 1)
    groupClamp1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("RGBA.A".encode('string_escape'))
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode




    #Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    param = lastNode.getParam("Info")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("onInputChanged")
    if param is not None:
        param.setValue("zLightWrap.inputChanged".encode('string_escape'))
        del param


    #Create the user-parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron".encode('string_escape'), "User".encode('string_escape'))
    param = lastNode.createStringParam("zlightwrap".encode('string_escape'), "zLightWrap".encode('string_escape'))
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Developed by Huargo Vfx. v1.0".encode('string_escape'))
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    param.setDefaultValue("zLightWrap")
    lastNode.zlightwrap = param
    del param

    param = lastNode.createDouble2DParam("Blur1size".encode('string_escape'), "Diffuse".encode('string_escape'))
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Size (diameter) of the filter kernel, in pixel units (>=0). The standard deviation of the corresponding Gaussian is size/2.4. No filter is applied if size < 1.2.".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(60, 0)
    param.setValue(60, 1)
    lastNode.Blur1size = param
    del param

    param = lastNode.createChoiceParam("Blur1filter".encode('string_escape'), "Filter".encode('string_escape'))
    entries = [ ("Quasi-Gaussian".encode('string_escape'), "".encode('string_escape')),
    ("Gaussian".encode('string_escape'), "".encode('string_escape')),
    ("Box".encode('string_escape'), "".encode('string_escape')),
    ("Triangle".encode('string_escape'), "".encode('string_escape')),
    ("Quadratic".encode('string_escape'), "".encode('string_escape'))]
    param.setOptions(entries)
    del entries
    param.setDefaultValue(1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Bluring filter. The quasi-Gaussian filter should be appropriate in most cases. The Gaussian filter is more isotropic (its impulse response has rotational symmetry), but slower.\n\nQuasi-Gaussian: Quasi-Gaussian filter (0-order recursive Deriche filter, faster) - IIR (infinite support / impulsional response).\nGaussian: Gaussian filter (Van Vliet recursive Gaussian filter, more isotropic, slower) - IIR (infinite support / impulsional response).\nBox: Box filter - FIR (finite support / impulsional response).\nTriangle: Triangle/tent filter - FIR (finite support / impulsional response).\nQuadratic: Quadratic filter - FIR (finite support / impulsional response).".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Blur1filter = param
    del param

    param = lastNode.createColorParam("Multiply1value".encode('string_escape'), "Intensity".encode('string_escape'), True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2, 0)
    param.setDefaultValue(0.25, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(2, 1)
    param.setDefaultValue(0.25, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(2, 2)
    param.setDefaultValue(0.25, 2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(2, 3)
    param.setDefaultValue(0.25, 3)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Constant to multiply with the selected channels.".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Multiply1value = param
    del param

    param = lastNode.createDoubleParam("Saturation1saturation".encode('string_escape'), "Saturation".encode('string_escape'))
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Color saturation factor to apply. 0 produces grayscale.".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Saturation1saturation = param
    del param

    param = lastNode.createDouble2DParam("Blur2size".encode('string_escape'), "BG Blur".encode('string_escape'))
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Size (diameter) of the filter kernel, in pixel units (>=0). The standard deviation of the corresponding Gaussian is size/2.4. No filter is applied if size < 1.2.".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(40, 0)
    param.setValue(40, 1)
    lastNode.Blur2size = param
    del param

    param = lastNode.createBooleanParam("effect_only".encode('string_escape'), "Effect Only".encode('string_escape'))

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.effect_only = param
    del param

    param = lastNode.createChoiceParam("Merge2operation".encode('string_escape'), "Operation".encode('string_escape'))
    entries = [ ("atop".encode('string_escape'), "".encode('string_escape')),
    ("average".encode('string_escape'), "".encode('string_escape')),
    ("color".encode('string_escape'), "".encode('string_escape')),
    ("color-burn".encode('string_escape'), "".encode('string_escape')),
    ("color-dodge".encode('string_escape'), "".encode('string_escape')),
    ("conjoint-over".encode('string_escape'), "".encode('string_escape')),
    ("copy".encode('string_escape'), "".encode('string_escape')),
    ("difference".encode('string_escape'), "".encode('string_escape')),
    ("disjoint-over".encode('string_escape'), "".encode('string_escape')),
    ("divide".encode('string_escape'), "".encode('string_escape')),
    ("exclusion".encode('string_escape'), "".encode('string_escape')),
    ("freeze".encode('string_escape'), "".encode('string_escape')),
    ("from".encode('string_escape'), "".encode('string_escape')),
    ("geometric".encode('string_escape'), "".encode('string_escape')),
    ("grain-extract".encode('string_escape'), "".encode('string_escape')),
    ("grain-merge".encode('string_escape'), "".encode('string_escape')),
    ("hard-light".encode('string_escape'), "".encode('string_escape')),
    ("hue".encode('string_escape'), "".encode('string_escape')),
    ("hypot".encode('string_escape'), "".encode('string_escape')),
    ("in".encode('string_escape'), "".encode('string_escape')),
    ("luminosity".encode('string_escape'), "".encode('string_escape')),
    ("mask".encode('string_escape'), "".encode('string_escape')),
    ("matte".encode('string_escape'), "".encode('string_escape')),
    ("max".encode('string_escape'), "".encode('string_escape')),
    ("min".encode('string_escape'), "".encode('string_escape')),
    ("minus".encode('string_escape'), "".encode('string_escape')),
    ("multiply".encode('string_escape'), "".encode('string_escape')),
    ("out".encode('string_escape'), "".encode('string_escape')),
    ("over".encode('string_escape'), "".encode('string_escape')),
    ("overlay".encode('string_escape'), "".encode('string_escape')),
    ("pinlight".encode('string_escape'), "".encode('string_escape')),
    ("plus".encode('string_escape'), "".encode('string_escape')),
    ("reflect".encode('string_escape'), "".encode('string_escape')),
    ("saturation".encode('string_escape'), "".encode('string_escape')),
    ("screen".encode('string_escape'), "".encode('string_escape')),
    ("soft-light".encode('string_escape'), "".encode('string_escape')),
    ("stencil".encode('string_escape'), "".encode('string_escape')),
    ("under".encode('string_escape'), "".encode('string_escape')),
    ("xor".encode('string_escape'), "".encode('string_escape'))]
    param.setOptions(entries)
    del entries
    param.setDefaultValue(28)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("The operation used to merge the input A and B images.\nThe operator formula is applied to each component: A and B represent the input component (Red, Green, Blue, or Alpha) of each input, and a and b represent the Alpha component of each input.\nIf Alpha masking is checked, the output alpha is computed using a different formula (a+b - a*b).\nAlpha masking is always enabled for HSL modes (hue, saturation, color, luminosity).\n\natop: Ab + B(1 - a) (a.k.a. src-atop)\naverage: (A + B) / 2\ncolor: SetLum(A, Lum(B))\ncolor-burn: darken B towards A\ncolor-dodge: brighten B towards A\nconjoint-over: A + B(1-a)/b, A if a > b\ncopy: A (a.k.a. src)\ndifference: abs(A-B) (a.k.a. absminus)\ndisjoint-over: A+B(1-a)/b, A+B if a+b < 1\ndivide: A/B, 0 if A < 0 and B < 0\nexclusion: A+B-2AB\nfreeze: 1-sqrt(1-A)/B\nfrom: B-A (a.k.a. subtract)\ngeometric: 2AB/(A+B)\ngrain-extract: B - A + 0.5\ngrain-merge: B + A - 0.5\nhard-light: multiply if A < 0.5, screen if A > 0.5\nhue: SetLum(SetSat(A, Sat(B)), Lum(B))\nhypot: sqrt(A*A+B*B)\nin: Ab (a.k.a. src-in)\nluminosity: SetLum(B, Lum(A))\nmask: Ba (a.k.a dst-in)\nmatte: Aa + B(1-a) (unpremultiplied over)\nmax: max(A, B) (a.k.a. lighten only)\nmin: min(A, B) (a.k.a. darken only)\nminus: A-B\nmultiply: AB, 0 if A < 0 and B < 0\nout: A(1-b) (a.k.a. src-out)\nover: A+B(1-a) (a.k.a. src-over)\noverlay: multiply if B<0.5, screen if B>0.5\npinlight: if B >= 0.5 then max(A, 2*B - 1), min(A, B * 2.0 ) else\nplus: A+B (a.k.a. add)\nreflect: A*A / (1 - B)\nsaturation: SetLum(SetSat(B, Sat(A)), Lum(B))\nscreen: A+B-AB\nsoft-light: burn-in if A < 0.5, lighten if A > 0.5\nstencil: B(1-a) (a.k.a. dst-out)\nunder: A(1-b)+B (a.k.a. dst-over)\nxor: A(1-b)+B(1-a)".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    options = param.getOptions()
    foundOption = False
    for i in range(len(options)):
        if options[i] == "plus".encode('string_escape'):
            param.setValue(i)
            foundOption = True
            break
    if not foundOption:
        app.writeToScriptEditor("Could not set option for parameter Merge2operation of node Group1".encode('string_escape'))
    lastNode.Merge2operation = param
    del param

    param = lastNode.createBooleanParam("constant_highlight".encode('string_escape'), "Use Constant as BG".encode('string_escape'))

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.constant_highlight = param
    del param

    param = lastNode.createColorParam("Constant1_1color".encode('string_escape'), "Constant Color".encode('string_escape'), True)
    param.setMinimum(-2.14748e+09, 0)
    param.setMaximum(2.14748e+09, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2.14748e+09, 1)
    param.setMaximum(2.14748e+09, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2.14748e+09, 2)
    param.setMaximum(2.14748e+09, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setMinimum(-2.14748e+09, 3)
    param.setMaximum(2.14748e+09, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Color to fill the image with.".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(0.630757, 1)
    param.setValue(0.630757, 2)
    lastNode.Constant1_1color = param
    del param

    param = lastNode.createInt2DParam("get_Res".encode('string_escape'), "BG_Res".encode('string_escape'))
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("".encode('string_escape'))
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setVisible(False)
    lastNode.get_Res = param
    del param

    #Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    #Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupClamp1)
    groupShuffle1.connectInput(1, groupDot3)
    groupBlur1.connectInput(0, groupShuffle1)
    groupBlur2.connectInput(0, groupSwitch2)
    groupMerge1.connectInput(0, groupConstant1)
    groupMerge1.connectInput(1, groupBlur2)
    groupMerge1.connectInput(2, groupSeExpr1)
    groupMerge2.connectInput(0, groupDot2)
    groupMerge2.connectInput(3, groupSaturation1_1_1)
    groupDot2.connectInput(0, groupDot3)
    groupSwitch1.connectInput(0, groupMerge2)
    groupSwitch1.connectInput(1, groupSaturation1_1_1)
    groupDot3.connectInput(0, groupInput1)
    groupSwitch2.connectInput(0, groupInput2)
    groupSwitch2.connectInput(1, groupConstant1_1)
    groupMultiply1_1.connectInput(0, groupMerge1)
    groupSaturation1_1_1.connectInput(0, groupMultiply1_1)
    groupSeExpr1.connectInput(0, groupShuffle1)
    groupSeExpr1.connectInput(1, groupBlur1)
    groupClamp1.connectInput(0, groupSwitch1)

    param = groupBlur1.getParam("size")
    param.setExpression("thisGroup.Blur1size.get()[dimension]".encode('string_escape'), False, 0)
    param.setExpression("thisGroup.Blur1size.get()[dimension]".encode('string_escape'), False, 1)
    del param
    param = groupBlur1.getParam("filter")
    param.setExpression("thisGroup.Blur1filter.get()".encode('string_escape'), False, 0)
    del param
    param = groupBlur2.getParam("size")
    param.setExpression("thisGroup.Blur2size.get()[dimension]".encode('string_escape'), False, 0)
    param.setExpression("thisGroup.Blur2size.get()[dimension]".encode('string_escape'), False, 1)
    del param
    param = groupMerge2.getParam("operation")
    param.setExpression("thisGroup.Merge2operation.get()".encode('string_escape'), False, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.effect_only.get()".encode('string_escape'), False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.constant_highlight.get()".encode('string_escape'), False, 0)
    del param
    param = groupConstant1_1.getParam("bottomLeft")
    param.setExpression("thisGroup.get_Res.get()[dimension]".encode('string_escape'), False, 0)
    param.setExpression("thisGroup.get_Res.get()[dimension]".encode('string_escape'), False, 1)
    del param
    param = groupConstant1_1.getParam("color")
    param.setExpression("thisGroup.Constant1_1color.get()[dimension]".encode('string_escape'), False, 0)
    param.setExpression("thisGroup.Constant1_1color.get()[dimension]".encode('string_escape'), False, 1)
    param.setExpression("thisGroup.Constant1_1color.get()[dimension]".encode('string_escape'), False, 2)
    del param
    param = groupMultiply1_1.getParam("value")
    param.setExpression("thisGroup.Multiply1value.get()[dimension]".encode('string_escape'), False, 0)
    param.setExpression("thisGroup.Multiply1value.get()[dimension]".encode('string_escape'), False, 1)
    param.setExpression("thisGroup.Multiply1value.get()[dimension]".encode('string_escape'), False, 2)
    param.setExpression("thisGroup.Multiply1value.get()[dimension]".encode('string_escape'), False, 3)
    del param
    param = groupSaturation1_1_1.getParam("saturation")
    param.setExpression("thisGroup.Saturation1saturation.get()".encode('string_escape'), False, 0)
    del param

    try:
        extModule = sys.modules["zLightWrapExt".encode('string_escape')]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
